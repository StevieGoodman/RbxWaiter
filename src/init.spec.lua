local Waiter = require(script.Parent)

return function()
    local level1 = game.Workspace.level1
    local level2 = level1.level2
    local otherLevel2 = level1.other
    local level3 = level2.level3

    describe("filterInstances()", function()
        it("should filter by tag by default", function()
            local filteredList = Waiter.filterInstances(
                level1, nil, level1.GetDescendants, nil
            )
            expect(#filteredList).to.be.equal(3)
        end)

        it("should filter by tag", function()
            local filteredList = Waiter.filterInstances(
                level1, nil, level1.GetDescendants, "Tag"
            )
            expect(#filteredList).to.be.equal(3)
        end)

        it("should filter by class name", function()
            local filteredList = Waiter.filterInstances(level1.Parent, "InvalidClassName", level1.Parent.getDescendants, "ClassName")
            expect(#filteredList).to.be.equal(0)
            filteredList = Waiter.filterInstances(level1.Parent, "Folder", level1.Parent.getDescendants, "ClassName")
            expect(#filteredList).to.be.equal(2)
            filteredList = Waiter.filterInstances(level1.Parent, "Configuration", level1.Parent.getDescendants, "ClassName")
            expect(#filteredList).to.be.equal(2)
            filteredList = Waiter.filterInstances(level1, "Instance", level1.Parent.getDescendants, "ClassName")
            expect(#filteredList).to.be.equal(3)
        end)
    end)

    describe("getChildren()", function()
        it("should return a non-empty table if children are found", function()
            local children = Waiter.getChildren(level1)
            expect(#children).to.be.equal(2)
            expect(table.find(children, level2) == nil).to.be.equal(false)
            expect(table.find(children, otherLevel2) == nil).to.be.equal(false)
        end)
        it("should return empty table if no children are found", function()
            local children = Waiter.getChildren(level3)
            expect(#children).to.be.equal(0)
        end)
    end)

    describe("getChild()", function()
        it("should return a userdata if a child is found", function()
            local child = Waiter.getChild(level1)
            expect(child).to.be.equal(level2)
        end)
        it("should return nil if no child is found", function()
            local child = Waiter.getChild(level3)
            expect(child).to.be.equal(nil)
        end)
    end)

    describe("getDescendants()", function()
        it("should return a non-empty table if descendants are found", function()
            local descendants = Waiter.getDescendants(level1)
            expect(#descendants).to.be.equal(3)
            expect(table.find(descendants, level2) == nil).to.be.equal(false)
            expect(table.find(descendants, otherLevel2) == nil).to.be.equal(false)
            expect(table.find(descendants, level3) == nil).to.be.equal(false)
        end)
        it("should return empty table if no descendants are found", function()
            local descendants = Waiter.getDescendants(level3)
            expect(#descendants).to.be.equal(0)
        end)
    end)

    describe("getDescendant()", function()
        it("should return a userdata if a descendant is found", function()
            local descendant = Waiter.getDescendant(level1)
            expect(descendant).to.be.equal(level2)
        end)
        it("should return nil if no descendant is found", function()
            local descendant = Waiter.getDescendant(level3)
            expect(descendant).to.be.equal(nil)
        end)
    end)

    describe("getAncestors()", function()
        it("should return a non-empty table if ancestors are found", function()
            local ancestors = Waiter.getAncestors(level3)
            expect(#ancestors).to.be.equal(3)
            expect(table.find(ancestors, level1) == nil).to.be.equal(false)
            expect(table.find(ancestors, level2) == nil).to.be.equal(false)
        end)
        it("should return empty table if no ancestors are found", function()
            local ancestors = Waiter.getAncestors(workspace)
            expect(#ancestors).to.be.equal(0)
        end)
    end)

    describe("getAncestor()", function()
        it("should return a userdata if an ancestor is found", function()
            local ancestor = Waiter.getAncestor(level3)
            expect(ancestor).to.be.equal(level2)
        end)
        it("should return nil if no ancestor is found", function()
            local ancestor = Waiter.getAncestor(workspace)
            expect(ancestor).to.be.equal(nil)
        end)
    end)

    describe("getSiblings()", function()
        it("should return a non-empty table if siblings are found", function()
            local siblings = Waiter.getSiblings(level2)
            expect(#siblings).to.be.equal(1)
            expect(table.find(siblings, otherLevel2) == nil).to.be.equal(false)
        end)
        it("should return empty table if no siblings are found", function()
            local siblings = Waiter.getSiblings(level3)
            expect(#siblings).to.be.equal(0)
        end)
        it("should return nil if origin is game", function()
            local sibling = Waiter.getSibling(game)
            expect(sibling).to.be.equal(nil)
        end)
        it("should return services if origin is a service", function()
            local siblings = Waiter.getSiblings(game.Workspace)
            expect(#siblings).to.be.equal(#game:GetChildren() - 1)
        end)
    end)

    describe("getSibling()", function()
        it("should return a userdata if a sibling is found", function()
            local sibling = Waiter.getSibling(level2)
            expect(sibling).to.be.equal(otherLevel2)
        end)
        it("should return nil if no sibling is found", function()
            local sibling = Waiter.getSibling(level3)
            expect(sibling).to.be.equal(nil)
        end)
    end)
end