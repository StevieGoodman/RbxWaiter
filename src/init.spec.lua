local Waiter = require(script.Parent)

return function()
    local level1 = game.Workspace.Level1
    local level2 = level1.Level2
    local otherLevel2 = level1.OtherLevel2
    local level3 = level2.Level3
    level3.Level1ObjectValue.Value = level1
    level3.Level2ObjectValue.Value = level2
    level3.OtherLevel2ObjectValue.Value = otherLevel2
    level3.Level3ObjectValue.Value = level3

    describe("filterInstances()", function()
        it("should filter by tag by default", function()
            local filteredList = Waiter.filterInstances(
                level1, nil, level1.GetDescendants, nil
            )
            expect(#filteredList).to.be.equal(7)
        end)

        it("should filter by tag", function()
            local filteredList = Waiter.filterInstances(
                level1, nil, level1.GetDescendants, "Tag"
            )
            expect(#filteredList).to.be.equal(7)
        end)

        it("should filter by class name", function()
            local filteredList = Waiter.filterInstances(level1.Parent, "InvalidClassName", level1.Parent.getDescendants, "ClassName")
            expect(#filteredList).to.be.equal(0)
            filteredList = Waiter.filterInstances(level1.Parent, "Folder", level1.Parent.getDescendants, "ClassName")
            expect(#filteredList).to.be.equal(2)
            filteredList = Waiter.filterInstances(level1.Parent, "Configuration", level1.Parent.getDescendants, "ClassName")
            expect(#filteredList).to.be.equal(2)
            filteredList = Waiter.filterInstances(level1, "Instance", level1.Parent.getDescendants, "ClassName")
            expect(#filteredList).to.be.equal(7)
        end)
    end)

    describe("getChildren()", function()
        it("should return a non-empty table if children are found", function()
            local children = Waiter.getChildren(level1)
            expect(#children).to.be.equal(2)
            expect(table.find(children, level2) == nil).to.be.equal(false)
            expect(table.find(children, otherLevel2) == nil).to.be.equal(false)
        end)
        it("should return empty table if no children are found", function()
            local children = Waiter.getChildren(level3.Level1ObjectValue)
            expect(#children).to.be.equal(0)
        end)
    end)

    describe("getChild()", function()
        it("should return a userdata if a child is found", function()
            local child = Waiter.getChild(level1)
            expect(child).to.be.equal(level2)
        end)
        it("should return nil if no child is found", function()
            local child = Waiter.getChild(level3.Level1ObjectValue)
            expect(child).to.be.equal(nil)
        end)
    end)

    describe("waitForChild()", function()
        it("should return a promise that resolves when a child is found", function()
            local promise = Waiter.waitForChild(level3, "level4")
            task.wait(1)
            local level4 = Instance.new("Folder")
            level4:AddTag("level4")
            level4.Parent = level3
            local success, result = promise:await()
            expect(success).to.be.equal(true)
            expect(result).to.be.equal(level4)
            level4:Destroy()
        end)

        it("should cancel the promise if the child is not found", function()
            local promise = Waiter.waitForChild(level3, "level4"):timeout(1)
            local success, _ = promise:await()
            expect(success).to.be.equal(false)
        end)
    end)

    describe("getDescendants()", function()
        it("should return a non-empty table if descendants are found", function()
            local descendants = Waiter.getDescendants(level1)
            expect(#descendants).to.be.equal(7)
            expect(table.find(descendants, level2) == nil).to.be.equal(false)
            expect(table.find(descendants, otherLevel2) == nil).to.be.equal(false)
            expect(table.find(descendants, level3) == nil).to.be.equal(false)
        end)
        it("should return empty table if no descendants are found", function()
            local descendants = Waiter.getDescendants(level3.Level1ObjectValue)
            expect(#descendants).to.be.equal(0)
        end)
    end)

    describe("getDescendant()", function()
        it("should return a userdata if a descendant is found", function()
            local descendant = Waiter.getDescendant(level1)
            expect(descendant).to.be.equal(level2)
        end)
        it("should return nil if no descendant is found", function()
            local descendant = Waiter.getDescendant(level3.Level1ObjectValue)
            expect(descendant).to.be.equal(nil)
        end)
    end)

    describe("getAncestors()", function()
        it("should return a non-empty table if ancestors are found", function()
            local ancestors = Waiter.getAncestors(level3)
            expect(#ancestors).to.be.equal(3)
            expect(table.find(ancestors, level1) == nil).to.be.equal(false)
            expect(table.find(ancestors, level2) == nil).to.be.equal(false)
        end)
        it("should return empty table if no ancestors are found", function()
            local ancestors = Waiter.getAncestors(workspace)
            expect(#ancestors).to.be.equal(0)
        end)
    end)

    describe("getAncestor()", function()
        it("should return a userdata if an ancestor is found", function()
            local ancestor = Waiter.getAncestor(level3)
            expect(ancestor).to.be.equal(level2)
        end)
        it("should return nil if no ancestor is found", function()
            local ancestor = Waiter.getAncestor(workspace)
            expect(ancestor).to.be.equal(nil)
        end)
    end)

    describe("getSiblings()", function()
        it("should return a non-empty table if siblings are found", function()
            local siblings = Waiter.getSiblings(level2)
            expect(#siblings).to.be.equal(1)
            expect(table.find(siblings, otherLevel2) == nil).to.be.equal(false)
        end)
        it("should return empty table if no siblings are found", function()
            local siblings = Waiter.getSiblings(level3)
            expect(#siblings).to.be.equal(0)
        end)
        it("should return nil if origin is game", function()
            local sibling = Waiter.getSibling(game)
            expect(sibling).to.be.equal(nil)
        end)
        it("should return services if origin is a service", function()
            local siblings = Waiter.getSiblings(game.Workspace)
            expect(#siblings).to.be.equal(#game:GetChildren() - 1)
        end)
    end)

    describe("getSibling()", function()
        it("should return a userdata if a sibling is found", function()
            local sibling = Waiter.getSibling(level2)
            expect(sibling).to.be.equal(otherLevel2)
        end)
        it("should return nil if no sibling is found", function()
            local sibling = Waiter.getSibling(level3)
            expect(sibling).to.be.equal(nil)
        end)
    end)

    describe("fromObjectValues()", function()
        it("should return a list of instances if found", function()
            local table = Waiter.fromObjectValues(level1, "Level1ObjectValue")
            expect(typeof(table)).to.be.equal("table")
            expect(#table).to.be.equal(1)
            expect(table[1]).to.be.equal(level1)

            table = Waiter.fromObjectValues(level1, "Level2ObjectValue")
            expect(#table).to.be.equal(2)

            table = Waiter.fromObjectValues(level1, "OtherLevel2ObjectValue")
            expect(#table).to.be.equal(1)
            expect(table[1]).to.be.equal(otherLevel2)

            table = Waiter.fromObjectValues(level1, "Level3ObjectValue")
            expect(#table).to.be.equal(1)
            expect(table[1]).to.be.equal(level3)
        end)
        it("should return empty table if no instance is found", function()
            local instance = Waiter.fromObjectValues(level1, "NonexistentTag")
            expect(#instance).to.be.equal(0)
        end)
    end)
end