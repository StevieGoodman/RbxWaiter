local Get = require(script.Parent.get)

return function()
    local level1 = game.Workspace.level1
    local level2 = level1.level2
    local otherLevel2 = level1.other
    local level3 = level2.level3

    describe("children()", function()
        it("should return a non-empty table if children are found", function()
            local children = Get.children(level1)
            expect(#children).to.be.equal(2)
            expect(table.find(children, level2) == nil).to.be.equal(false)
            expect(table.find(children, otherLevel2) == nil).to.be.equal(false)
        end)
        it("should return empty table if no children are found", function()
            local children = Get.children(level3)
            expect(#children).to.be.equal(0)
        end)
    end)

    describe("child()", function()
        it("should return a userdata if a child is found", function()
            local child = Get.child(level1)
            expect(child).to.be.equal(level2)
        end)
        it("should return nil if no child is found", function()
            local child = Get.child(level3)
            expect(child).to.be.equal(nil)
        end)
    end)

    describe("descendants()", function()
        it("should return a non-empty table if descendants are found", function()
            local descendants = Get.descendants(level1)
            expect(#descendants).to.be.equal(3)
            expect(table.find(descendants, level2) == nil).to.be.equal(false)
            expect(table.find(descendants, otherLevel2) == nil).to.be.equal(false)
            expect(table.find(descendants, level3) == nil).to.be.equal(false)
        end)
        it("should return empty table if no descendants are found", function()
            local descendants = Get.descendants(level3)
            expect(#descendants).to.be.equal(0)
        end)
    end)

    describe("descendant()", function()
        it("should return a userdata if a descendant is found", function()
            local descendant = Get.descendant(level1)
            expect(descendant).to.be.equal(level2)
        end)
        it("should return nil if no descendant is found", function()
            local descendant = Get.descendant(level3)
            expect(descendant).to.be.equal(nil)
        end)
    end)

    describe("ancestors()", function()
        it("should return a non-empty table if ancestors are found", function()
            local ancestors = Get.ancestors(level3)
            expect(#ancestors).to.be.equal(3)
            expect(table.find(ancestors, level1) == nil).to.be.equal(false)
            expect(table.find(ancestors, level2) == nil).to.be.equal(false)
        end)
        it("should return empty table if no ancestors are found", function()
            local ancestors = Get.ancestors(workspace)
            expect(#ancestors).to.be.equal(0)
        end)
    end)

    describe("ancestor()", function()
        it("should return a userdata if an ancestor is found", function()
            local ancestor = Get.ancestor(level3)
            expect(ancestor).to.be.equal(level2)
        end)
        it("should return nil if no ancestor is found", function()
            local ancestor = Get.ancestor(workspace)
            expect(ancestor).to.be.equal(nil)
        end)
    end)

    describe("siblings()", function()
        it("should return a non-empty table if siblings are found", function()
            local siblings = Get.siblings(level2)
            expect(#siblings).to.be.equal(1)
            expect(table.find(siblings, otherLevel2) == nil).to.be.equal(false)
        end)
        it("should return empty table if no siblings are found", function()
            local siblings = Get.siblings(level3)
            expect(#siblings).to.be.equal(0)
        end)
        it("should return nil if origin is game", function()
            local sibling = Get.sibling(game)
            expect(sibling).to.be.equal(nil)
        end)
        it("should return services if origin is a service", function()
            local siblings = Get.siblings(game.Workspace)
            expect(#siblings).to.be.equal(#game:GetChildren() - 1)
        end)
    end)

    describe("sibling()", function()
        it("should return a userdata if a sibling is found", function()
            local sibling = Get.sibling(level2)
            expect(sibling).to.be.equal(otherLevel2)
        end)
        it("should return nil if no sibling is found", function()
            local sibling = Get.sibling(level3)
            expect(sibling).to.be.equal(nil)
        end)
    end)
end