local Custodian = require(script.Parent.Parent.Custodian)
local Get = require(script.Parent.get)

return function()
    local level1 = game.Workspace.level1
    local level2 = level1.level2
    local otherLevel2 = level1.other
    local level3 = level2.level3

    describe("children()", function()
        it("should return an custodian.option", function()
            local optionObj = Get.child(level1)
            expect(optionObj).to.be.a("table")
            expect(optionObj.value).never.to.equal(nil)
        end)
        it("custodian.option should contain the children of origin", function()
            local optionObj = Get.children(level1)
            Custodian.option.isSomeThen(optionObj, function(children)
                expect(#children).to.be.equal(2)
                expect(children[1]).to.be.equal(level2)
                expect(children[2]).to.be.equal(otherLevel2)
            end)
            Custodian.option.isNoneThenCall(optionObj, error, "expected custodian.option.some, got custodian.option.none")
        end)
        it("should return custodian.option.none if no children are found", function()
            local optionObj = Get.children(level3)
            Custodian.option.isSomeThenCall(optionObj, error, "expected custodian.option.none, got custodian.option.some")
        end)
    end)

    describe("child()", function()
        it("should return an custodian.option", function()
            local optionObj = Get.child(level1)
            expect(optionObj).to.be.a("table")
            expect(optionObj.value).never.to.equal(nil)
        end)
        it("custodian.option should contain the child of origin", function()
            local optionObj = Get.child(level1)
            Custodian.option.isSomeThen(optionObj, function(child)
                expect(child).to.be.equal(level2)
            end)
            Custodian.option.isNoneThenCall(optionObj, error, "expected custodian.option.some, got custodian.option.none")
        end)
        it("should return custodian.option.none if no child is found", function()
            local optionObj = Get.child(level3)
            Custodian.option.isSomeThenCall(optionObj, error, "expected custodian.option.none, got custodian.option.some")
        end)
    end)

    describe("descendants()", function()
        it("should return an custodian.option", function()
            local optionObj = Get.child(level1)
            expect(optionObj).to.be.a("table")
            expect(optionObj.value).never.to.equal(nil)
        end)
        it("custodian.option should contain the descendants of origin", function()
            local optionObj = Get.descendants(level1)
            Custodian.option.isSomeThen(optionObj, function(descendants)
                expect(#descendants).to.be.equal(3)
                expect(descendants[1]).to.be.equal(level2)
                expect(descendants[2]).to.be.equal(level3)
                expect(descendants[3]).to.be.equal(otherLevel2)
            end)
            Custodian.option.isNoneThenCall(optionObj, error, "expected custodian.option.some, got custodian.option.none")
        end)
        it("should return custodian.option.none if no descendants are found", function()
            local optionObj = Get.descendants(level3)
            Custodian.option.isSomeThenCall(optionObj, error, "expected custodian.option.none, got custodian.option.some")
        end)
    end)

    describe("descendant()", function()
        it("should return an custodian.option", function()
            local optionObj = Get.child(level1)
            expect(optionObj).to.be.a("table")
            expect(optionObj.value).never.to.equal(nil)
        end)
        it("custodian.option should contain the descendant of origin", function()
            local optionObj = Get.descendant(level1)
            Custodian.option.isSomeThen(optionObj, function(descendant)
                expect(descendant).to.be.equal(level2)
            end)
            Custodian.option.isNoneThenCall(optionObj, error, "expected custodian.option.some, got custodian.option.none")
        end)
        it("should return custodian.option.none if no descendant is found", function()
            local optionObj = Get.descendant(level3)
            Custodian.option.isSomeThenCall(optionObj, error, "expected custodian.option.none, got custodian.option.some")
        end)
    end)

    describe("ancestors()", function()
        it("should return an custodian.option", function()
            local optionObj = Get.child(level1)
            expect(optionObj).to.be.a("table")
            expect(optionObj.value).never.to.equal(nil)
        end)
        it("custodian.option should contain the ancestors of origin", function()
            local optionObj = Get.ancestors(level3)
            Custodian.option.isSomeThen(optionObj, function(ancestors)
                expect(#ancestors).to.be.equal(3)
                expect(ancestors[1]).to.be.equal(level2)
                expect(ancestors[2]).to.be.equal(level1)
                expect(ancestors[3]).to.be.equal(workspace)
            end)
            Custodian.option.isNoneThenCall(optionObj, error, "expected custodian.option.some, got custodian.option.none")
        end)
        it("should return custodian.option.none if no ancestors are found", function()
            local optionObj = Get.ancestors(workspace)
            Custodian.option.isSomeThenCall(optionObj, error, "expected custodian.option.none, got custodian.option.some")
        end)
    end)

    describe("ancestor()", function()
        it("should return an custodian.option", function()
            local optionObj = Get.child(level1)
            expect(optionObj).to.be.a("table")
            expect(optionObj.value).never.to.equal(nil)
        end)
        it("custodian.option should contain the ancestor of origin", function()
            local optionObj = Get.ancestor(level3)
            Custodian.option.isSomeThen(optionObj, function(ancestor)
                expect(ancestor).to.be.equal(level2)
            end)
            Custodian.option.isNoneThenCall(optionObj, error, "expected custodian.option.some, got custodian.option.none")
        end)
        it("should return custodian.option.none if no ancestor is found", function()
            local optionObj = Get.ancestor(workspace)
            Custodian.option.isSomeThenCall(optionObj, error, "expected custodian.option.none, got custodian.option.some")
        end)
    end)

    describe("siblings()", function()
        it("should return an custodian.option", function()
            local optionObj = Get.child(level1)
            expect(optionObj).to.be.a("table")
            expect(optionObj.value).never.to.equal(nil)
        end)
        it("custodian.option should contain the siblings of origin", function()
            local optionObj = Get.siblings(level2)
            Custodian.option.isSomeThen(optionObj, function(siblings)
                expect(#siblings).to.be.equal(1)
                expect(siblings[1]).to.be.equal(otherLevel2)
            end)
            Custodian.option.isNoneThenCall(optionObj, error, "expected custodian.option.some, got custodian.option.none")
        end)
        it("should return custodian.option.none if no siblings are found", function()
            local optionObj = Get.siblings(level3)
            Custodian.option.isSomeThenCall(optionObj, error, "expected custodian.option.none, got custodian.option.some")
        end)
    end)

    describe("sibling()", function()
        it("should return an custodian.option", function()
            local optionObj = Get.child(level1)
            expect(optionObj).to.be.a("table")
            expect(optionObj.value).never.to.equal(nil)
        end)
        it("custodian.option should contain the sibling of origin", function()
            local optionObj = Get.sibling(level2)
            Custodian.option.isSomeThen(optionObj, function(sibling)
                expect(sibling).to.be.equal(otherLevel2)
            end)
            Custodian.option.isNoneThenCall(optionObj, error, "expected custodian.option.some, got custodian.option.none")
        end)
        it("should return custodian.option.none if no sibling is found", function()
            local optionObj = Get.sibling(level3)
            Custodian.option.isSomeThenCall(optionObj, error, "expected custodian.option.none, got custodian.option.some")
        end)
    end)

end